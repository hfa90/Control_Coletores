# Guia de Contribui√ß√£o

Obrigado por considerar contribuir para o Sistema de Controle de Coletores! Este documento fornece diretrizes para contribui√ß√µes.

## ü§ù Como Contribuir

### 1. Fork do Reposit√≥rio
```bash
# Clone seu fork
git clone https://github.com/SEU-USUARIO/sistema-coletores.git
cd sistema-coletores

# Adicione o reposit√≥rio original como upstream
git remote add upstream https://github.com/USUARIO-ORIGINAL/sistema-coletores.git
```

### 2. Configura√ß√£o do Ambiente de Desenvolvimento
```bash
# Crie um ambiente virtual
python -m venv venv
source venv/bin/activate  # Linux/Mac
# ou
venv\Scripts\activate     # Windows

# Instale as depend√™ncias
pip install -r requirements.txt

# Configure o banco de dados de teste
createdb sistema_coletores_test
psql -d sistema_coletores_test -f database_schema.sql
```

### 3. Cria√ß√£o de Branch
```bash
# Crie uma branch para sua feature
git checkout -b feature/nova-funcionalidade

# Ou para corre√ß√£o de bug
git checkout -b bugfix/correcao-bug
```

## üìù Padr√µes de C√≥digo

### Python
- Siga o PEP 8
- Use type hints quando poss√≠vel
- Mantenha linhas com m√°ximo de 88 caracteres
- Use docstrings para fun√ß√µes e classes

```python
def exemplo_funcao(parametro: str) -> bool:
    """
    Fun√ß√£o de exemplo que demonstra os padr√µes.
    
    Args:
        parametro (str): Descri√ß√£o do par√¢metro
        
    Returns:
        bool: Descri√ß√£o do retorno
    """
    return True
```

### JavaScript
- Use ES6+ features
- Mantenha consist√™ncia na indenta√ß√£o (2 espa√ßos)
- Use nomes descritivos para vari√°veis e fun√ß√µes
- Adicione coment√°rios em l√≥gicas complexas

### HTML/CSS
- Use indenta√ß√£o consistente
- Mantenha sem√¢ntica HTML
- Use classes CSS descritivas
- Evite inline styles

## üß™ Testes

### Executando Testes
```bash
# Execute todos os testes
python -m pytest

# Execute com coverage
python -m pytest --cov=.

# Execute testes espec√≠ficos
python -m pytest tests/test_database.py
```

### Escrevendo Testes
- Teste todas as novas funcionalidades
- Mantenha coverage acima de 80%
- Use nomes descritivos para testes
- Teste casos de sucesso e falha

```python
def test_adicionar_coletor_sucesso():
    """Testa adi√ß√£o bem-sucedida de coletor"""
    # Arrange
    dados_coletor = {
        'id': '999',
        'modelo': 'Teste',
        'status': 'Dispon√≠vel para Uso'
    }
    
    # Act
